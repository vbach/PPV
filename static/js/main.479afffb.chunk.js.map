{"version":3,"sources":["components/MovieView.js","components/Search.js","components/TopMovies.js","components/CurrentMovies.js","components/Main.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["MovieView","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentMovie","_this2","API_ID","props","location","results","id","url","concat","fetch","headers","Content-Type","Accept","then","response","json","data","console","log","setState","catch","err","duration","hours","rhours","Math","floor","minutes","round","imgUrl","react_default","a","createElement","className","poster_path","src","alt","title","backdrop_path","tagline","homepage","href","rel","target","imdb_id","overview","Number","budget","toLocaleString","revenue","popularity","convertTime","runtime","release_date","React","Component","Search","options","map","r","Card","key","style","width","margin","Link","to","pathname","Img","variant","onClick","document","getElementById","classList","add","TopMovies","topMovies","string","length","substring","_this3","item","Media","Body","original_name","index_es","icon","truncateText","CurrentMovies","currentMovies","border","padding","Title","Text","Main","components_CurrentMovies","components_TopMovies","API_URL","API_KEY","Header","query","getInfo","handleInputChange","search","value","Navbar","expand","Brand","Toggle","aria-controls","Collapse","Nav","Form","inline","FormControl","type","placeholder","ref","input","onChange","components_Search","library","faSearch","faArrowRight","App","BrowserRouter","components_Header","Switch","Route","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.479afffb.chunk.js","sourcesContent":["import React from \"react\"\n\nclass MovieView extends React.Component {\n\n    // Load more button calls api to load movie details api information?\n    // Or onClick in search results, loads api to return this information for that movie\n\n    constructor() {\n        super()\n        this.state = {\n            currentMovie: []\n        }\n    }\n\n    componentDidMount() {\n        const API_URL = \"https://api.themoviedb.org/3/movie/\";\n        const API_KEY = \"c9eb92bd013f0908283e7d5956dfc4a5\";\n        let API_ID = this.props.location.state.results.id;\n        let url = `${API_URL}${API_ID}?api_key=${API_KEY}&language=en-US`;\n\n        fetch(url, {\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        })\n            .then(response => response.json())\n            .then(data => {\n                console.log(data)\n                this.setState({ currentMovie: data })\n            })\n            .catch(err => console.log(err))\n    }\n\n    convertTime(duration) {\n        let hours = (duration / 60);\n        let rhours = Math.floor(hours);\n        let minutes = (hours - rhours) * 60;\n        let rminutes = Math.round(minutes);\n\n        return rhours + \"hr(s) \" + rminutes + \" minute(s)\"\n    }\n\n    render() {\n        const imgUrl = \"https://image.tmdb.org/t/p/w500/\";\n        const imdbUrl = \"https://www.imdb.com/title/\";\n        return (\n\n            <div className=\"container mt-5\">\n                <div className=\"row\">\n\n                    <div className=\"col-12 col-md-6\">\n                        {this.state.currentMovie.poster_path ? <img src={imgUrl + this.state.currentMovie.poster_path} alt={this.state.currentMovie.title} /> : <img src={imgUrl + this.state.currentMovie.backdrop_path} alt={this.state.currentMovie.title} />}\n\n                    </div>\n\n                    <div className=\"col-12 col-md-6\">\n                        <h1>{this.state.currentMovie.title}</h1>\n\n                        <h2 className=\"tagline\">{this.state.currentMovie.tagline}</h2>\n                        <p>\n                            {this.state.currentMovie.homepage ? <a href={this.state.currentMovie.homepage} rel=\"noopener noreferr er\" target=\"_blank\">Official Homepage </a> : \"\"}\n\n                            | <a href={imdbUrl + this.state.currentMovie.imdb_id} rel=\"noopener noreferrer\" target=\"_blank\" >IMDB</a></p>\n\n                        <p>{this.state.currentMovie.overview}</p>\n                        <p>Budget: ${Number(this.state.currentMovie.budget).toLocaleString()}</p>\n                        <p>Revenue: ${Number(this.state.currentMovie.revenue).toLocaleString()}</p>\n                        <p>Popularity: {this.state.currentMovie.popularity}%</p>\n                        <p>Duration: {this.convertTime(this.state.currentMovie.runtime)}</p>\n                        <p>Released: {this.state.currentMovie.release_date}</p>\n                    </div>\n                </div>\n\n\n            </div>\n        )\n    }\n}\n\nexport default MovieView","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Card } from 'react-bootstrap'\n\n\nconst Search = (props) => {\n\n    const options = props.results.map(r => (\n\n\n        <Card key={r.id} style={{ width: '18rem', margin: '0 auto' }}>\n            <Link\n                results={r}\n                to={{\n                    pathname: '/Movie',\n                    state: { results: r }\n                }}>\n                <Card.Img\n                    variant=\"top\"\n                    src={\"https://image.tmdb.org/t/p/w200/\" + r.poster_path}\n                    onClick={() => {\n                        document.getElementById(\"search\").classList.add(\"hide\")\n                    }} />\n            </Link>\n        </Card>\n\n\n    ))\n    return <div className=\"row search\" id=\"search\">{options}</div>\n}\n\nexport default Search","import React from \"react\"\nimport { Link } from 'react-router-dom'\nimport { Media } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nclass TopMovies extends React.Component {\n\n    constructor() {\n        super()\n        this.state = {\n            topMovies: []\n        }\n    }\n\n    componentDidMount() {\n        fetch(\"https://api.themoviedb.org/3/trending/all/day?api_key=c9eb92bd013f0908283e7d5956dfc4a5\")\n            .then(response => response.json())\n            .then(data => {\n                this.setState({\n                    topMovies: data.results\n                })\n                console.log(this.state.topMovies)\n            })\n    }\n\n    truncateText(string) {\n        if (string.length > 100) {\n            return string.substring(0, 100) + '...';\n        } else {\n            return string;\n        }\n    }\n\n    render() {\n\n        const url = \"https://image.tmdb.org/t/p/w200/\";\n\n        if (this.state.topMovies.results !== '') {\n            return (\n\n                <div className=\"top-movies mt-5\">\n                    <h1>Top Movies</h1>\n\n                    {this.state.topMovies.map((item, key) =>\n\n\n                        <Media key={item.id} className=\"mb-2\">\n                            <img src={url + item.poster_path} alt=\"Movie\" key={item.id} className=\"mr-3 top-imgs\" />\n\n                            <Media.Body>\n                                <h3>\n                                    <Link\n                                        key={item.id}\n                                        results={item}\n                                        to={{\n                                            pathname: '/Movie',\n                                            state: { results: item }\n                                        }}>\n                                        {item.title ? item.title : item.original_name}\n                                        <span className=\"arrow-right\">\n                                            <FontAwesomeIcon icon=\"arrow-right\"></FontAwesomeIcon>\n                                        </span>\n                                    </Link></h3>\n                                <p>{this.truncateText(item.overview)}</p>\n\n\n                            </Media.Body>\n                        </Media>\n\n\n                    )}\n\n                </div>\n            )\n        }\n    }\n}\n\nexport default TopMovies","import React from \"react\"\nimport { Card } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\n\nclass CurrentMovies extends React.Component {\n\n    constructor() {\n        super()\n        this.state = {\n            currentMovies: []\n        }\n    }\n\n    componentDidMount() {\n        const url = \"https://api.themoviedb.org/3/movie/popular?api_key=c9eb92bd013f0908283e7d5956dfc4a5&language=en-US&page=1\";\n\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                this.setState({\n                    currentMovies: data.results\n                })\n                console.log(this.state.currentMovies)\n            })\n    }\n\n    truncateText(string) {\n        if (string.length > 150) {\n            return string.substring(0, 150) + '...';\n        } else {\n            return string;\n        }\n    }\n\n    render() {\n        // Image URL\n        const url = \"https://image.tmdb.org/t/p/w200/\";\n        return (\n\n\n\n            <div className=\"row mt-5\">\n\n                <div className=\"col-12\">\n                    <h1>Currently In Theater</h1>\n                </div>\n                {this.state.currentMovies.map((item, key) =>\n\n                    <Card key={item.id} style={{ width: '15rem', border: 'none', padding: 0, }}>\n                        <Link results={item} className=\"mt-auto btn current-buttons\" to={{ pathname: '/Movie', state: { results: item } }}>\n                            <Card.Img variant=\"top\" src={url + item.backdrop_path} alt={item.title} className=\"current-imgs\" /></Link>\n                        <Card.Body className=\"d-flex flex-column\">\n                            <Card.Title>\n                                <Link\n                                    results={item}\n                                    to={{\n                                        pathname: '/movie',\n                                        state: { results: item }\n                                    }}>\n                                    <h3>{item.title}</h3>\n                                </Link>\n                            </Card.Title>\n                            <Card.Text>\n                                {this.truncateText(item.overview)}\n                            </Card.Text>\n\n                        </Card.Body>\n                    </Card>\n\n                )}\n            </div>\n        )\n    }\n}\n\nexport default CurrentMovies","import React from \"react\"\nimport TopMovies from './TopMovies';\nimport CurrentMovies from './CurrentMovies';\n\nclass Main extends React.Component {\n\n    render() {\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-sm-6 col-md-8\">\n                        <CurrentMovies />\n                    </div>\n                    <div className=\"col-sm-6 col-md-4\">\n                        <TopMovies />\n                    </div>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Main","import React from \"react\"\nimport { Nav, Navbar, Form, FormControl } from \"react-bootstrap\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport Search from \"./Search\"\n\nconst API_URL = \"https://api.themoviedb.org/3/search/movie\";\nconst API_KEY = \"c9eb92bd013f0908283e7d5956dfc4a5\"\n\nclass Header extends React.Component {\n\n    state = {\n        query: '',\n        results: []\n    }\n\n\n\n    getInfo = () => {\n        fetch(`${API_URL}?api_key=${API_KEY}&language=en-US&query=${this.state.query}&page=1&include_adult=false`)\n            .then(response => response.json())\n            .then(data => this.setState({ results: data.results }));\n\n    }\n\n    handleInputChange = () => {\n        this.setState({\n            query: this.search.value\n        }, () => {\n            if (this.state.query && this.state.query.length > 2) {\n                if (this.state.query.length % 3 === 0) {\n\n                    this.getInfo()\n                }\n            }\n        })\n    }\n    render() {\n        return (\n            <div>\n                <Navbar className=\"nav\" expand=\"lg\">\n                    <Navbar.Brand className=\"brand\" href=\"/\">Movie App</Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                        </Nav>\n                        <Form inline>\n                            <span className=\"search-span\">\n                                <FontAwesomeIcon icon=\"search\" />\n                            </span>\n                            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2 search-input\" ref={input => this.search = input} onChange={this.handleInputChange} />\n                        </Form>\n                    </Navbar.Collapse>\n                </Navbar>\n                <Search results={this.state.results} />\n                {/* Button for submitting search. Use Link in Button to pass query and api. */}\n\n            </div>\n        )\n    }\n}\n\nexport default Header","import React, { Component } from 'react';\nimport MovieView from './components/MovieView';\nimport Search from './components/Search'\nimport Main from './components/Main'\nimport Header from './components/Header'\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faSearch, faArrowRight } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faSearch, faArrowRight)\n\nclass App extends Component {\n\n  render() {\n\n    return (\n\n      <div>\n        <Router>\n          <div>\n            <Header />\n\n            <Switch>\n              <Route exact path=\"/\" component={Main} />\n              <Route exact path=\"/movie\" component={MovieView} />\n              <Route exact path=\"/search-results\" component={Search} />\n            </Switch>\n\n          </div>\n        </Router>\n\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}